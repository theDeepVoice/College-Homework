情况一：
基本代码：
#include <stdio.h>
#include <math.h>
int main()
{
	int p[10];
	for (int i = 0; i < 10; i++) {
		p[i] = i;
	}
	p[11] = 3;
	printf("%d",p[11] );
	return 0;
}

状况：发生异常，

情况二：
int main()
{
	int p[10];
	for (int i = 0; i < 10; i++) {
		p[i] = i;
	}
	int a = p[20];
	printf("%d", a);
	return 0;
}
状况：运行正常。
猜测：程序运行时，左值一般为变量，右值一般为常量。出现后者情况时，等号右端可能直接由p地址往后索引20个int大小数据（中间数据不一定为int），之后按int的格式读取之后的二进制转化为数值并赋值到左端。前者p[ i ] 数组在读取p[ 11 ]时，数组按照索引到了第11个int的地址前，p[11]左值是变量，所以有可能p[11]占据了某个非int类型（如long类型）的存储空间，而后编译系统察觉异常，检测了数组的溢出，发生报错，也有可能数组非法访问的内存，在程序运行中起到重要作用，而数组越界访问导致程序崩溃而产生错误。